let treeData = [];
let flatFiles = [];
let currentActive = null;

// 加载目录树
fetch('files.json')
  .then(res => res.json())
  .then(json => {
    treeData = json;
    flatFiles = getAllFiles(treeData);
    renderTree(treeData, document.getElementById('tree'));
  });

function getAllFiles(tree, prefix = '') {
  let files = [];
  tree.forEach(item => {
    if (item.type === 'file') {
      files.push({...item, fullpath: (prefix ? prefix + '/' : '') + item.name});
    } else if (item.type === 'folder') {
      files = files.concat(getAllFiles(item.children || [], (prefix ? prefix + '/' : '') + item.name));
    }
  });
  return files;
}

// 渲染目录树
function renderTree(tree, container, path = '') {
  container.innerHTML = '';
  tree.forEach(item => {
    const div = document.createElement('div');
    div.className = 'tree-node ' + (item.type === 'folder' ? 'tree-folder' : 'tree-file');
    div.textContent = (item.type === 'folder' ? '📂 ' : '📄 ') + item.name;
    div.setAttribute('data-path', (path ? path + '/' : '') + item.name);
    if (item.type === 'file') {
      div.onclick = () => selectFile(item, div);
    }
    if (item.type === 'folder') {
      // 可折叠
      const toggle = document.createElement('span');
      toggle.className = 'tree-toggle';
      toggle.textContent = '▶';
      let expanded = false;
      let childrenDiv = document.createElement('div');
      childrenDiv.className = 'tree-children';
      childrenDiv.style.display = 'none';
      toggle.onclick = (e) => {
        e.stopPropagation();
        expanded = !expanded;
        childrenDiv.style.display = expanded ? '' : 'none';
        toggle.textContent = expanded ? '▼' : '▶';
      };
      div.prepend(toggle);
      div.onclick = (e) => {
        if (e.target !== toggle) {
          expanded = !expanded;
          childrenDiv.style.display = expanded ? '' : 'none';
          toggle.textContent = expanded ? '▼' : '▶';
        }
      };
      container.appendChild(div);
      renderTree(item.children, childrenDiv, (path ? path + '/' : '') + item.name);
      container.appendChild(childrenDiv);
    } else {
      container.appendChild(div);
    }
  });
}

// 文件点击展示
function selectFile(file, nodeDiv) {
  if (currentActive) currentActive.classList.remove('active');
  nodeDiv.classList.add('active');
  currentActive = nodeDiv;
  document.getElementById('file-title').textContent = file.name;
  const ext = file.name.split('.').pop().toLowerCase();
  const fileUrl = encodeURI(file.path);
  if (['png','jpg','jpeg','gif','bmp','svg','webp'].includes(ext)) {
    document.getElementById('file-content').innerHTML =
      `<img src="${fileUrl}" alt="${file.name}" /><div style="margin:0.7em 0"><a href="${fileUrl}" download>下载图片</a></div>`;
  } else if (['md','txt','json','js','css','html','py','java','c','cpp','xml','sh','ts','yml','yaml'].includes(ext)) {
    // 纯文本预览
    fetch(fileUrl).then(r=>r.text()).then(text=>{
      document.getElementById('file-content').innerHTML = `<pre>${escapeHtml(text.slice(0,20000))}${text.length>20000?'\n...(内容过长截断)':''}</pre>
      <div style="margin:0.7em 0"><a href="${fileUrl}" download>下载文件</a></div>`;
    }).catch(()=>document.getElementById('file-content').innerHTML = '无法预览文件。');
  } else {
    document.getElementById('file-content').innerHTML =
      `<a href="${fileUrl}" download>下载该文件</a>`;
  }
}

// 搜索
document.getElementById('globalSearch').addEventListener('input', function() {
  const key = this.value.trim().toLowerCase();
  if (!key) {
    renderTree(treeData, document.getElementById('tree'));
    return;
  }
  // 搜索所有文件、文件夹
  let matchedFiles = flatFiles.filter(f => f.name.toLowerCase().includes(key) || (f.fullpath||'').toLowerCase().includes(key));
  let html = matchedFiles.length ? matchedFiles.map(f =>
    `<div class="tree-node tree-file" data-path="${f.fullpath}" style="margin-left:0.5em;cursor:pointer;" onclick="selectFileByPath('${f.fullpath.replace(/'/g,"\\'")}')">
      📄 ${f.fullpath}
    </div>`).join('') : '<div style="color:#e85959;font-size:1.05em;margin:1em">未找到相关文件</div>';
  document.getElementById('tree').innerHTML = html;
});

// 辅助：根据 fullpath 选择文件
window.selectFileByPath = function(fullpath) {
  let file = flatFiles.find(f => f.fullpath === fullpath);
  if (file) selectFile(file, document.querySelector(`[data-path="${CSS.escape(fullpath)}"]`));
};

function escapeHtml(text) {
  return text.replace(/[<>&"]/g, c => ({
    '<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;'
  }[c]));
}